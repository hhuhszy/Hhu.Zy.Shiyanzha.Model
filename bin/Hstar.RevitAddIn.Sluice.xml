<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hstar.RevitAddIn.Sluice</name>
    </assembly>
    <members>
        <member name="T:Hstar.RevitAddIn.Sluice.App">
            <summary>
                entry point of application
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.App.Instance">
            <summary>
                <seealso cref="T:Hstar.RevitAddIn.Sluice.App"/>的唯一实例
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.App.AssemblyName">
            <summary>
                程序集
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.App.ProjectInformationEntity">
            <summary>
                <seealso cref="P:Autodesk.Revit.DB.Document.ProjectInformation"/>外部存储数据
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.App.ProjectInformationSchema">
            <summary>
                <seealso cref="P:Autodesk.Revit.DB.Document.ProjectInformation"/>外部存储数据模型
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.App.MainWindowHandle">
            <summary>
                revit主窗口句柄
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.App.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.App.OnStartup(Autodesk.Revit.UI.UIControlledApplication)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.App.OnShutdown(Autodesk.Revit.UI.UIControlledApplication)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ViewHost">
            <summary>
                view's host container which has a new view and an old view
            </summary>
            <summary>
            ViewHost
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ViewHost.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewModel">
            <summary>
                clr wrapper of <seealso cref="F:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewModelProperty"/>
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewModelProperty">
            <summary>
                dp of <seealso cref="P:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewModel"/>, default value is null
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ViewHost.CurrentView">
            <summary>
                clr wrapper of <seealso cref="F:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewProperty"/>
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.ViewHost.CurrentViewProperty">
            <summary>
                dp of <seealso cref="P:Hstar.RevitAddIn.Sluice.ViewHost.CurrentView"/>,default value is default&lt;<seealso cref="T:Hstar.RevitAddIn.Sluice.ApplicationView"/>&gt;
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ViewHost.OnCurrentViewCoerced(System.Windows.DependencyObject,System.Object)">
            <summary>
                called when <see cref="P:Hstar.RevitAddIn.Sluice.ViewHost.CurrentView" /> is about to change
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ViewHost.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.DI">
            <summary>
                dependency injection class
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.DI.Provider">
            <summary>
                service provider
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.DI.Build">
            <summary>
                build service provider
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.DI.ApplicationViewModel">
            <summary>
                instance of <seealso cref="P:Hstar.RevitAddIn.Sluice.DI.ApplicationViewModel"/>
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.MyServiceCollectionExtension">
            <summary>
                extension of <seealso cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.MyServiceCollectionExtension.AddMySerilog(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                add Serilog service
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.MyServiceCollectionExtension.AddBasicViewModel(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                add basic view model
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2">
            <summary>
                A base attached property to replace the vanilla WPF attached property
            </summary>
            <typeparam name="Parent">The parent class to be the attached property</typeparam>
            <typeparam name="Property">The type of this attached property</typeparam>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.Instance">
            <summary>
                A singleton instance of our parent class
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.ValueChanged">
            <summary>
                Fired when the value changes
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.ValueUpdated">
            <summary>
                Fired when the value changes, even when the value is the same
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.ValueProperty">
            <summary>
                The attached property for this class
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                The callback event when the <see cref="F:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.ValueProperty" /> is changed
            </summary>
            <param name="d">The UI element that had it's property changed</param>
            <param name="e">The arguments for the event</param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.OnValuePropertyUpdated(System.Windows.DependencyObject,System.Object)">
            <summary>
                The callback event when the <see cref="F:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.ValueProperty" /> is changed, even if it is the same value
            </summary>
            <param name="d">The UI element that had it's property changed</param>
            <param name="value"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.GetValue(System.Windows.DependencyObject)">
            <summary>
                Gets the attached property
            </summary>
            <param name="d">The element to get the property from</param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.SetValue(System.Windows.DependencyObject,`1)">
            <summary>
                Sets the attached property
            </summary>
            <param name="d">The element to get the property from</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                The method that is called when any attached property of this type is changed
            </summary>
            <param name="sender">The UI element that this property was changed for</param>
            <param name="e">The arguments for this event</param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseAttachedProperty`2.OnValueUpdated(System.Windows.DependencyObject,System.Object)">
            <summary>
                The method that is called when any attached property of this type is changed, even if the value is the same
            </summary>
            <param name="sender">The UI element that this property was changed for</param>
            <param name="value"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.IsBusyProperty">
            <summary>
                The IsBusy attached property for a anything that wants to flag if the control is busy
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.MonitorPasswordProperty">
            <summary>
                The MonitorPassword attached property for a <see cref="T:System.Windows.Controls.PasswordBox" />
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.MonitorPasswordProperty.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.MonitorPasswordProperty.PasswordBox_PasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Fired when the password box password value changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.HasTextProperty">
            <summary>
                The HasText attached property for a <see cref="T:System.Windows.Controls.PasswordBox" />
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.HasTextProperty.SetValue(System.Windows.DependencyObject)">
            <summary>
                Sets the HasText property based on if the caller <see cref="T:System.Windows.Controls.PasswordBox" /> has any text
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseValueConverter`1">
            <summary>
                A base value converter that allows direct XAML usage
            </summary>
            <typeparam name="T">The type of this value converter</typeparam>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.BaseValueConverter`1._converter">
            <summary>
                A single static instance of this value converter
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseValueConverter`1.ProvideValue(System.IServiceProvider)">
            <summary>
                Provides a static instance of the value converter
            </summary>
            <param name="serviceProvider">The service provider</param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseValueConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                The method to convert one type to another
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseValueConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                The method to convert a value back to it's source type
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.Boolean2BorderThicknessConverter">
            <summary>
                A converter that takes in a boolean and returns a thickness of 2 if true, useful for applying
                border radius on a true value
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Boolean2BorderThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Boolean2BorderThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.Boolean2VisibilityConverter">
            <summary>
                A converter that takes in a boolean and returns a <see cref="T:System.Windows.Visibility" />
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Boolean2VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Boolean2VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.CentimeterInchConverter">
            <summary>
                convert centimeter to inch
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.CentimeterInchConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.CentimeterInchConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.CentimeterInchConverter.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.EnumBooleanConverter">
            <summary>
                convert enum to bool
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.EnumBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.EnumBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ApplicationViewExtension">
            <summary>
                extension of <seealso cref="T:Hstar.RevitAddIn.Sluice.ApplicationView"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ApplicationViewExtension.ToBaseView(Hstar.RevitAddIn.Sluice.ApplicationView,System.Object)">
            <summary>
                change <seealso cref="T:Hstar.RevitAddIn.Sluice.ApplicationView"/> to <seealso cref="T:Hstar.RevitAddIn.Sluice.BaseView"/>
            </summary>
            <param name="view"></param>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ApplicationViewExtension.ToApplicationView(Hstar.RevitAddIn.Sluice.BaseView)">
            <summary>
                change <seealso cref="T:Hstar.RevitAddIn.Sluice.BaseView"/> to <seealso cref="T:Hstar.RevitAddIn.Sluice.ApplicationView"/>
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ExpressionHelpers">
            <summary>
                A helper for expressions
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExpressionHelpers.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Compiles an expression and gets the functions return value
            </summary>
            <typeparam name="T">The type of return value</typeparam>
            <param name="lambda">The expression to compile</param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExpressionHelpers.GetPropertyValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
                Compiles an expression and gets the functions return value
            </summary>
            <typeparam name="T">The type of return value</typeparam>
            <typeparam name="In">The input to the expression</typeparam>
            <param name="lambda">The expression to compile</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExpressionHelpers.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
                Sets the underlying properties value to the given value
                from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExpressionHelpers.SetPropertyValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,``0)">
            <summary>
                Sets the underlying properties value to the given value
                from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <typeparam name="In">The input to the expression</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
            <param name="input"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ExternalEventHelper">
            <summary>
                a helper class for revit external event.
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExternalEventHelper.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ExternalEventHelper.Invoke(System.Action{Autodesk.Revit.UI.UIApplication},System.String)">
            <summary>
                invoke certain handler
            </summary>
            <param name="handler">the handler added to the handler queues</param>
            <param name="name">the human readable name if not set will be set a new guid</param>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.ExternalEventHelper.Start">
            <summary>
                subscribe to start event
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.ExternalEventHelper.End">
            <summary>
                subscribe to end event
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ExternalEventHelper.ExternalEventCommon">
            <summary>
                a common implementation of <see cref="T:IExternalEventHandler" /> which maintain
                a queue to execute and expose a start and end event for user;
                this queue will automatically enqueue and dequeue handler;
                so we can avoid annoying subscribe and unsubscribe code.
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.ExternalEventHelper.ExternalEventCommon.Start">
            <summary>
                subscribe to start event
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.ExternalEventHelper.ExternalEventCommon.End">
            <summary>
                subscribe to end event
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ExternalEventArg">
            <summary>
                event args for revit external event
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ExternalEventArg.App">
            <summary>
                access to revit db
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ExternalEventArg.Name">
            <summary>
                human readable name
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ExternalEventArg.IsCancelled">
            <summary>
                indicates whether it has been cancelled
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ExternalEventArg.Data">
            <summary>
                store data when execute external command
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.DefaultCmdAvailability">
            <summary>
                default implementation of <seealso cref="T:Autodesk.Revit.UI.IExternalCommandAvailability"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.DefaultCmdAvailability.IsCommandAvailable(Autodesk.Revit.UI.UIApplication,Autodesk.Revit.DB.CategorySet)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.RelayCommand">
            <summary>
                relay command
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RelayCommand.RaiseCanExecuteChanged">
            <summary>
                manually invoke the <seealso cref="E:Hstar.RevitAddIn.Sluice.RelayCommand.CanExecuteChanged"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RelayCommand.#ctor(System.Predicate{System.Object},System.Action{System.Object})">
            <summary>
                ctor with canExecute and execute
            </summary>
            <param name="canExecute"></param>
            <param name="execute"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
                ctor with execute
            </summary>
            <param name="execute"></param>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.RelayCommand.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RelayCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RelayCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.RibbonPanelExtension">
            <summary>
                <see cref="T:Autodesk.Revit.UI.RibbonPanel"/>的扩展方法
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.RibbonPanelExtension.AddPushButtonToRibbonPanel``1(Autodesk.Revit.UI.RibbonPanel,System.String,System.String,System.String,System.String,System.Type)">
            <summary>
                为<seealso cref="T:Autodesk.Revit.UI.RibbonPanel"/>添加一个<seealso cref="T:Autodesk.Revit.UI.PushButton"/>
            </summary>
            <typeparam name="T">实现了<see cref="T:Autodesk.Revit.UI.IExternalCommand" />的类</typeparam>
            <param name="ownerRibbon">该button的宿主Ribbon</param>
            <param name="innerName">button内部标识名</param>
            <param name="text">button下方文本</param>
            <param name="toolTip">button提示文字</param>
            <param name="imagePath">button图标位置,相对项目根目录</param>
            <param name="availability">type of <see cref="T:Autodesk.Revit.UI.IExternalCommandAvailability"/></param>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.WindowDockPosition">
            <summary>
                The dock position of the window
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.Undocked">
            <summary>
                Not docked
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.Left">
            <summary>
                Docked to the left of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.Right">
            <summary>
                Docked to the right of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.TopBottom">
            <summary>
                Docked to the top/bottom of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.TopLeft">
            <summary>
                Docked to the top-left of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.TopRight">
            <summary>
                Docked to the top-right of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.BottomLeft">
            <summary>
                Docked to the bottom-left of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowDockPosition.BottomRight">
            <summary>
                Docked to the bottom-right of the screen
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.WindowResizer">
            <summary>
                Fixes the issue with Windows of Style <see cref="F:System.Windows.WindowStyle.None" /> covering the taskbar
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.#ctor(System.Windows.Window)">
            <summary>
                Default constructor
            </summary>
            <param name="window">The window to monitor and correctly maximize</param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.Window_SourceInitialized(System.Object,System.EventArgs)">
            <summary>
                Initialize and hook into the windows message pump
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Listens out for all windows messages for this window
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.WmGetMinMaxInfo(System.IntPtr,System.IntPtr)">
            <summary>
                Get the min/max window size for this window
                Correctly accounting for the task bar size and position
            </summary>
            <param name="hwnd"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.GetCursorPosition">
            <summary>
                Gets the current cursor position in screen coordinates relative to an entire multi-desktop position
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mWindow">
            <summary>
                The window to handle the resizing for
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mScreenSize">
            <summary>
                The last calculated available screen size
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mEdgeTolerance">
            <summary>
                How close to the edge the window has to be to be detected as at the edge of the screen
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mMonitorDpi">
            <summary>
                The transform matrix used to convert WPF sizes to screen pixels
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mLastScreen">
            <summary>
                The last screen the window was on
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mLastDock">
            <summary>
                The last known dock position
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowResizer.mBeingMoved">
            <summary>
                A flag indicating if the window is currently being moved/dragged
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.WindowResizer.WindowDockChanged">
            <summary>
                Called when the window dock position changes
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.WindowResizer.WindowStartedMove">
            <summary>
                Called when the window starts being moved/dragged
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.WindowResizer.WindowFinishedMove">
            <summary>
                Called when the window has been moved/dragged and then finished
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowResizer.CurrentMonitorSize">
            <summary>
                The size and position of the current monitor the window is on
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowResizer.CurrentMonitorMargin">
            <summary>
                The margin around the window for the current window to compensate for any non-usable area
                such as the task bar
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowResizer.CurrentScreenSize">
            <summary>
                The size and position of the current screen in relation to the multi-screen desktop
                For example a second monitor on the right will have a Left position of
                the X resolution of the screens on the left
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.Window_LocationChanged(System.Object,System.EventArgs)">
            <summary>
                Monitor for moving of the window and constantly check for docked positions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowResizer.Window_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
                Monitors for size changes and detects if the window has been docked (Aero snap) to an edge
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.MonitorOptions">
            <summary>
                MonitorOptions
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorOptions.MonitorDefaulttonull">
            <summary>
                MonitorDefaulttonull
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorOptions.MonitorDefaulttoprimary">
            <summary>
                MonitorDefaulttoprimary
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorOptions.MonitorDefaulttonearest">
            <summary>
                MonitorDefaulttonearest
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.MonitorInfo">
            <summary>
                MonitorInfo
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorInfo.CBSize">
            <summary>
                CBSize
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorInfo.RCMonitor">
            <summary>
                RCMonitor
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorInfo.RCWork">
            <summary>
                RCWork
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MonitorInfo.DWFlags">
            <summary>
                DWFlags
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.Rectangle">
            <summary>
                window rectangle
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Rectangle.Left">
            <summary>
                left,top,right,bottom
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Rectangle.Top">
            <summary>
                left,top,right,bottom
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Rectangle.Right">
            <summary>
                left,top,right,bottom
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Rectangle.Bottom">
            <summary>
                left,top,right,bottom
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                ctor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.MinMaxInfo">
            <summary>
                MinMaxInfo
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MinMaxInfo.PointReserved">
            <summary>
                PointReserved
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MinMaxInfo.PointMaxSize">
            <summary>
                PointMaxSize
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MinMaxInfo.PointMaxPosition">
            <summary>
                PointMaxPosition
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MinMaxInfo.PointMinTrackSize">
            <summary>
                PointMinTrackSize
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.MinMaxInfo.PointMaxTrackSize">
            <summary>
                PointMaxTrackSize
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.Point">
            <summary>
                my point
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Point.X">
            <summary>
                x coordinate of point.
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.Point.Y">
            <summary>
                y coordinate of point.
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Point.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct a point of coordinates (x,y).
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.Point.ToString">
            <summary>
                override toString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseExternalCommand">
            <summary>
                base class implements <seealso cref="T:Autodesk.Revit.UI.IExternalCommand"/>
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseExternalCommand.Instance">
            <summary>
                instance of this <seealso cref="T:Autodesk.Revit.UI.IExternalCommand"/>
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseExternalCommand.UiApplication">
            <summary>
                access to revit <seealso cref="T:UIApplication"/>
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseExternalCommand.ExternalEventHelper">
            <summary>
                external event helper
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseExternalCommand.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseExternalCommand.Execute(Autodesk.Revit.UI.ExternalCommandData,System.String@,Autodesk.Revit.DB.ElementSet)">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseExternalCommand.Execute">
            <summary>
                impl code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ComponentLibraryCmd">
            <summary>
                构件库外部命令
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ComponentLibraryCmd.Execute">
            <inheritdoc />
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ApplicationView">
            <summary>
                indicates the category of <seealso cref="T:Hstar.RevitAddIn.Sluice.BaseView"/>
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.ApplicationView.ComponentLibrary">
            <summary>
                the view of manage component library
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.StartUp">
            <summary>
                configuration of <seealso cref="T:Hstar.RevitAddIn.Sluice.DI"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.StartUp.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                register services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ApplicationViewModel">
            <summary>
                globally controls all the viewModel
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.ApplicationViewModel.GoToView(Hstar.RevitAddIn.Sluice.ApplicationView,Hstar.RevitAddIn.Sluice.BaseViewModel)">
            <summary>
                Navigates to the specified view.
                <remarks>view must be consistent with viewModel</remarks>
            </summary>
            <param name="view">The view to go to</param>
            <param name="viewModel">The view model, if any, to set explicitly to the new page</param>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ApplicationViewModel.CurrentView">
            <summary>
                indicates current view
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ApplicationViewModel.CurrentViewModel">
            <summary>
                The view model to use for the current page when the CurrentPage changes
                NOTE: This is not a live up-to-date view model of the current page
                it is simply used to set the view model of the current page
                at the time it changes
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.ViewModelLocator">
            <summary>
                Locates view models from the IoC for use in binding in Xaml files
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ViewModelLocator.Instance">
            <summary>
                Singleton instance of the locator
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.ViewModelLocator.ApplicationViewModel">
            <summary>
                The application view model
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseViewModel">
            <summary>
                basic class of all view models
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.BaseViewModel.Lock">
            <summary>
                used for ensure thread safety
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.BaseViewModel.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
                invoke the <seealso cref="E:Hstar.RevitAddIn.Sluice.BaseViewModel.PropertyChanged"/>
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseViewModel.RunCommandAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
                Runs a command if the updating flag is not set.
                If the flag is true (indicating the function is already running) then the action is not run.
                If the flag is false (indicating no running function) then the action is run.
                Once the action is finished if it was run, then the flag is reset to false
            </summary>
            <param name="updatingFlag">The boolean property flag defining if the command is already running</param>
            <param name="action">The action to run if the command is not already running</param>
            <returns></returns>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseViewModel.RunCommandAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
                Runs a command if the updating flag is not set.
                If the flag is true (indicating the function is already running) then the action is not run.
                If the flag is false (indicating no running function) then the action is run.
                Once the action is finished if it was run, then the flag is reset to false
            </summary>
            <param name="updatingFlag">The boolean property flag defining if the command is already running</param>
            <param name="action">The action to run if the command is not already running</param>
            <param name="defaultValue"></param>
            <typeparam name="T">The type the action returns</typeparam>
            <returns></returns>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.WindowVm">
            <summary>
                vm of <seealso cref="T:Hstar.RevitAddIn.Sluice.WindowHost"/>
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowVm.#ctor(System.Windows.Window)">
            <summary>
                default ctor
            </summary>
            <param name="window"></param>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.WindowVm._dockPosition">
            <summary>
                The last known dock position
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.WindowMinimumWidth">
            <summary>
                The smallest width the window can go to
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.WindowMinimumHeight">
            <summary>
                The smallest height the window can go to
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.BeingMoved">
            <summary>
                True if the window is currently being moved/dragged
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.WindowRadius">
            <summary>
                window radius
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.Borderless">
            <summary>
                True if the window should be borderless because it is docked or maximized
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.ResizeBorder">
            <summary>
                The size of the resize border around the window
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.TitleHeight">
            <summary>
                title height
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.FlatBorderThickness">
            <summary>
                The rectangle border around the window when docked
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.ResizeBorderThickness">
            <summary>
                The size of the resize border around the window, taking into account the outer margin
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.OuterMarginSizeThickness">
            <summary>
                The margin around the window to allow for a drop shadow
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.WindowCornerRadius">
            <summary>
                radius of window corner
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.TitleHeightGridLength">
            <summary>
                title height
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.InnerContentPadding">
            <summary>
                The padding of the inner content of the main window
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.DimmableOverlayVisible">
            <summary>
                True if we should have a dimmed overlay on the window
                such as when a popup is visible or the window is not focused
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.MinimizeCommand">
            <summary>
                minimize the window
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.MaximizeCommand">
            <summary>
                maximize the window
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.CloseCommand">
            <summary>
                close the window
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.WindowVm.MenuCommand">
            <summary>
                open the context menu
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowVm.WindowResized">
            <summary>
                If the window resizes to a special position (docked or maximized)
                this will update all required property change events to set the borders and radius values
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseView">
            <summary>
                basically the base template of all views
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseView.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.BaseView.Closed">
            <summary>
                listen to parent window's closed event
            </summary>
        </member>
        <member name="E:Hstar.RevitAddIn.Sluice.BaseView.Closing">
            <summary>
                listen to parent window's closing event
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseView.OnViewModelChanged(System.Object,System.Object)">
            <summary>
                called when this view model changed
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseView.ViewBag">
            <summary>
                used to share additional data between views
                <remarks>
                    viewBag do not implements INotifyPropertyChanged
                    so it's user's obligation to sync view model with viewBag;
                    you can sync view bag in event of Loaded!
                </remarks>
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseView.ViewModelObject">
            <summary>
                view model object which is set data context when its value
                is set.
            </summary>
        </member>
        <member name="F:Hstar.RevitAddIn.Sluice.BaseView.TitleProperty">
            <summary>
                dp of title, default is "未命名"
            </summary>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseView.Title">
            <summary>
                clr wrapper of dp title
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseView.Close">
            <summary>
                close the window that host this base view
            </summary>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.BaseView`1">
            <summary>
                generic version of <seealso cref="T:Hstar.RevitAddIn.Sluice.BaseView"/>
            </summary>
            <typeparam name="TVm"></typeparam>
        </member>
        <member name="P:Hstar.RevitAddIn.Sluice.BaseView`1.ViewModel">
            <summary>
                The view model associated with this page
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseView`1.#ctor">
            <summary>
                default ctor
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.BaseView`1.#ctor(`0)">
            <summary>
                default ctor with vm
            </summary>
            <param name="vm"></param>
        </member>
        <member name="T:Hstar.RevitAddIn.Sluice.WindowHost">
            <summary>
                host window
            </summary>
            <summary>
            WindowHost
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowHost.#ctor(Hstar.RevitAddIn.Sluice.ApplicationView)">
            <summary>
                default ctor
            </summary>
            <param name="startView"></param>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowHost.DispatcherOnUnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
                捕获UnhandledException
            </summary>
        </member>
        <member name="M:Hstar.RevitAddIn.Sluice.WindowHost.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
